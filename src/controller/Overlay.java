package controller;
import java.io.File;
import java.io.FileInputStream;
import javax.swing.JPanel;

import view.Panel;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Color;
import java.awt.Font;
import java.awt.BasicStroke;
import java.awt.RenderingHints;
import java.awt.geom.Line2D;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseEvent;

/**
 * A JPanel that is not visible to the user, but handles user-generated events
 * such as mouse clicks. Importantly, it handles the shooting mechanism of the
 * game, which involves mouse dragging and releasing.
 * 
 * @author junlin.yi
 *
 */
public class Overlay extends JPanel implements MouseListener, MouseMotionListener {
	/**
	 * Serial version ID.
	 */
	private static final long serialVersionUID = -3330037301923032433L;

	private Font font;

	private int shootstartx;
	private int shootstarty;
	private int shootdragx;
	private int shootdragy;
	private int clickx;
	private int clicky;
	private int dragx;
	private int dragy;

	/**
	 * Constructor for class, sets the JPanel to be invisible and adds a listener
	 * for mouse events.
	 */
	public Overlay() {
		super();

		setOpaque(false);
		setBackground(new Color(0, 0, 0, 0));

		createFont();

		// Listen for mouse events
		addMouseListener(this);
		addMouseMotionListener(this);
	}

	/**
	 * Creates the font for all text fields in the game.
	 */
	private void createFont() {
		try {
			File file = new File("dejavu.ttf");
			FileInputStream fis = new FileInputStream(file);
			font = Font.createFont(Font.TRUETYPE_FONT, fis).deriveFont(12f);
		} catch (java.io.IOException e) {
			System.out.println("I/O error");
			font = new Font(Font.SANS_SERIF, Font.PLAIN, 20);
		} catch (java.awt.FontFormatException e) {
			System.out.println("File \"dejavu.ttf\" not valid");
			font = new Font(Font.SANS_SERIF, Font.PLAIN, 20);
		}
	}

	/**
	 * Displays the current state of the game, including whose turn it is as well as
	 * who wins, any fouls, etc.
	 * 
	 * @param g The graphics context to display on.
	 */
	public void paintComponent(Graphics g) {
		Graphics2D g2d = (Graphics2D) g;
		g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_SPEED);
		g2d.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_SPEED);
		super.paintComponent(g);

		g2d.setFont(font);

		g2d.setColor(new Color(0, 0, 0));
		if (Panel.stripeTurn)
			g2d.drawString("It is Player 1's turn", Panel.WIDTH + 75, 300);
		else
			g2d.drawString("It is Player 2's turn", Panel.WIDTH + 75, 300);

		if (Panel.gameOver) {
			g2d.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 80));
			if (!Panel.stripeDone && Panel.stripeTurn)
				g2d.drawString("Player 2 wins from foul!", Panel.WIDTH / 2 - 300, Panel.HEIGHT / 2);
			else if (Panel.stripeTurn)
				g2d.drawString("Player 1 wins!", Panel.WIDTH / 2 - 100, Panel.HEIGHT / 2);
			else if (!Panel.solidDone && !Panel.stripeTurn)
				g2d.drawString("Player 1 wins from foul!", Panel.WIDTH / 2 - 300, Panel.HEIGHT / 2);
			else
				g2d.drawString("Player 2 wins!", Panel.WIDTH / 2 - 100, Panel.HEIGHT / 2);
			g2d.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 20));
		}

		// Aiming and shooting. Draws a black line whose angle and length
		// determines the direction and power of the shot.
		if (Panel.isPaused() && Panel.started) {
			g2d.setColor(Color.BLACK);
			g2d.setStroke(new BasicStroke(5));
			g2d.draw(new Line2D.Double(shootstartx, shootstarty, dragx, dragy));
		}
	}

	/**
	 * Handles what happens when the mouse is pressed, which typically signals the
	 * start of a shooting action.
	 * 
	 * @param e The mouse event generated by pressing the mouse.
	 */
	public void mousePressed(MouseEvent e) {
		Panel.started = true;
		shootstartx = e.getX();
		shootstarty = e.getY();
	}

	/**
	 * Handles what happens when the mouse is released, which means shooting the
	 * ball. Does this by finding the ball whose coordinates are closest to
	 * shootstart and multiplies that ball's velocity by the distance the mouse is
	 * dragged.
	 * 
	 * @param e The mouse event created when the mouse is released.
	 */
	public void mouseReleased(MouseEvent e) {
		shootdragx = e.getX() - shootstartx;
		shootdragy = e.getY() - shootstarty;
		if (shootdragx < -30 || shootdragx > 30) {
			if (shootdragx > 0)
				shootdragx = 30;
			else
				shootdragx = -30;
		}
		Panel.ball.get(Panel.ball.size() - 1).getSpeed().addX(-0.6 * shootdragx);
		if (shootdragy < -30 || shootdragy > 30) {
			if (shootdragy > 0)
				shootdragy = 30;
			else
				shootdragy = -30;
		}
		Panel.ball.get(Panel.ball.size() - 1).getSpeed().addY(-0.6 * shootdragy);
		Panel.play();
	}

	/**
	 * Handles what happens when the mouse is clicked.
	 * 
	 * @param e The mouse event generated when the mouse is clicked.
	 */
	public void mouseClicked(MouseEvent e) {
		clickx = e.getX();
		clicky = e.getY();
	}

	/**
	 * Gets the x coordinate of the mouse click.
	 * 
	 * @return Returns an int containing the x coordinate of the mouse click.
	 */
	public int getClickX() {
		return clickx;
	}

	/**
	 * Gets the y coordinate of the mouse click.
	 * 
	 * @return Returns an int containing the y coordinate of the mouse click.
	 */
	public int getClickY() {
		return clicky;
	}

	/**
	 * Sets the x and y coordinates of the mouse drag.
	 * 
	 * @param e The mouse event generated by the mouse drag.
	 */
	public void mouseDragged(MouseEvent e) {
		dragx = e.getX();
		dragy = e.getY();
	}

	public void mouseEntered(MouseEvent e) {
	}

	public void mouseExited(MouseEvent e) {
	}

	public void mouseMoved(MouseEvent e) {

	}

}
